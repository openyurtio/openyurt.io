"use strict";(self.webpackChunkopenyurt_io=self.webpackChunkopenyurt_io||[]).push([[57917],{62732:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"user-manuals/node-pool-management/create-a-node-pool","title":"Create a node pool","description":"The latest version of OpenYurt NodePool resource is apps.openyurt.io/v1beta2.","source":"@site/docs/user-manuals/node-pool-management/create-a-node-pool.md","sourceDirName":"user-manuals/node-pool-management","slug":"/user-manuals/node-pool-management/create-a-node-pool","permalink":"/docs/next/user-manuals/node-pool-management/create-a-node-pool","draft":false,"unlisted":false,"editUrl":"https://github.com/openyurtio/openyurt.io/edit/master/docs/user-manuals/node-pool-management/create-a-node-pool.md","tags":[],"version":"current","lastUpdatedBy":"Ihor Sychevskyi","lastUpdatedAt":1749416985000,"frontMatter":{"title":"Create a node pool"},"sidebar":"docs","previous":{"title":"Node pool management overview","permalink":"/docs/next/user-manuals/node-pool-management/node-pool-management-overview"},"next":{"title":"Edit a node pool","permalink":"/docs/next/user-manuals/node-pool-management/edit-a-node-pool"}}');var r=o(74848),a=o(28453);const s={title:"Create a node pool"},l=void 0,d={},i=[{value:"Types",id:"types",level:2},{value:"Cloud",id:"cloud",level:3},{value:"Edge",id:"edge",level:3},{value:"Leaders",id:"leaders",level:2},{value:"Enabling leaders",id:"enabling-leaders",level:3},{value:"Election Strategy",id:"election-strategy",level:3},{value:"Replicas",id:"replicas",level:3},{value:"Pool Scope Metadata",id:"pool-scope-metadata",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The latest version of OpenYurt NodePool resource is apps.openyurt.io/v1beta2."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Please refer to the latest ",(0,r.jsx)(n.a,{href:"/docs/next/reference/api_reference",children:"API Reference"})," for details"]})}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.h3,{id:"cloud",children:"Cloud"}),"\n",(0,r.jsx)(n.p,{children:"The cloud nodepool type is used for service topology feature. When running on the cloud side, the connectivity with the API server is considered stable so this will not cause YurtHub to cache responses or use the health checker against the API server."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ cat <<EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta2\nkind: NodePool\nmetadata:\n  name: beijing\nspec:\n  type: Cloud\nEOF\n"})}),"\n",(0,r.jsx)(n.h3,{id:"edge",children:"Edge"}),"\n",(0,r.jsx)(n.p,{children:"The edge nodepool type is used to workloads running as the name suggests on the edge. In this scenario, responses are cached, and health checks with the API server are used."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a nodepool with ",(0,r.jsx)(n.code,{children:"type=Edge"})," and ",(0,r.jsx)(n.code,{children:"hostNetwork=true"}),", also include Annotation, Label, Taint."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ cat <<EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta2\nkind: NodePool\nmetadata:\n  name: hangzhou\nspec:\n  type: Edge\n  hostNetwork: true\n  annotations:\n    apps.openyurt.io/example: test-hangzhou\n  labels:\n    apps.openyurt.io/example: test-hangzhou\n  taints:\n  - key: apps.openyurt.io/example\n    value: test-hangzhou\n    effect: NoSchedule\nEOF\n"})}),"\n",(0,r.jsx)(n.h2,{id:"leaders",children:"Leaders"}),"\n",(0,r.jsx)(n.p,{children:"The Nodepool hub leader feature enables leaders to be elected. Leaders are responsible for handling API server requests, caching and redistributing responses to followers within the same nodepool upon request."}),"\n",(0,r.jsx)(n.h3,{id:"enabling-leaders",children:"Enabling leaders"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"enableLeaderElection"})," causes leaders to be elected within the nodepool based on the strategy configured. By default, the election strategy is set to  ",(0,r.jsx)(n.code,{children:"random"})," with ",(0,r.jsx)(n.code,{children:"leaderReplicas=1"}),". Pool scope metadata will also be set to ",(0,r.jsx)(n.code,{children:"services/v1"})," and ",(0,r.jsx)(n.code,{children:"discovery.k8s.io/v1/endpointslices"})]}),"\n",(0,r.jsx)(n.h3,{id:"election-strategy",children:"Election Strategy"}),"\n",(0,r.jsxs)(n.p,{children:["Election strategy determines how leaders are selected from within the nodepool. The current supported strategies are ",(0,r.jsx)(n.code,{children:"random"})," and ",(0,r.jsx)(n.code,{children:"mark"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The random strategy picks nodes within the pool randomly to become a leader. Whereas the mark strategy uses the ",(0,r.jsx)(n.code,{children:"leaderNodeLabelSelector"})," field to select leaders."]}),"\n",(0,r.jsxs)(n.p,{children:["In both strategies, only leaders that are reporting a ready status with an ",(0,r.jsx)(n.code,{children:"InternalIP"})," will be eligible to be elected."]}),"\n",(0,r.jsx)(n.h3,{id:"replicas",children:"Replicas"}),"\n",(0,r.jsx)(n.p,{children:"Leader replicas determine how many leaders will be selected from the nodepool."}),"\n",(0,r.jsx)(n.p,{children:"In the following scenario, a nodepool is created for the edge with leader elections. Leaders will be selected randomly per the leaderElectionStrategy."}),"\n",(0,r.jsx)(n.h3,{id:"pool-scope-metadata",children:"Pool Scope Metadata"}),"\n",(0,r.jsx)(n.p,{children:"Pool scope metadata determines the types of resources that will be cached and redistributed upon request to followers by the leader within the nodepool."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a nodepool ",(0,r.jsx)(n.code,{children:"Type=Edge"}),", ",(0,r.jsx)(n.code,{children:"enableLeaderElection=true"})," using ",(0,r.jsx)(n.code,{children:"leaderElectionStrategy=random"})," with ",(0,r.jsx)(n.code,{children:"leaderReplicas=2"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'$ cat <<EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta2\nkind: NodePool\nmetadata:\n  name: hangzhou\nspec:\n  type: Edge\n  enableLeaderElection: true\n  interConnectivity: true\n  leaderElectionStrategy: random\n  leaderReplicas: 2\n  poolScopeMetadata:\n    - group: ""\n      resource: services\n      version: v1\n    - group: discovery.k8s.io\n      resource: endpointslices\n      version: v1\nEOF\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a nodepool ",(0,r.jsx)(n.code,{children:"Type=Edge"}),", ",(0,r.jsx)(n.code,{children:"enableLeaderElection=true"})," using ",(0,r.jsx)(n.code,{children:"leaderElectionStrategy=mark"})," for nodes with labelled ",(0,r.jsx)(n.code,{children:'nodepool.openyurt.io/leader: "true"'}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'$ cat <<EOF | kubectl apply -f -\napiVersion: apps.openyurt.io/v1beta2\nkind: NodePool\nmetadata:\n  name: hangzhou\nspec:\n  type: Edge\n  enableLeaderElection: true\n  interConnectivity: true\n  leaderElectionStrategy: mark\n  leaderNodeLabelSelector:                                                                                                                                                                 \u2502\n    nodepool.openyurt.io/leader: "true"\n  leaderReplicas: 2\n  poolScopeMetadata:\n    - group: ""\n      resource: services\n      version: v1\n    - group: discovery.k8s.io\n      resource: endpointslices\n      version: v1\nEOF\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We can check the leader status in the nodepool after it has been created"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Listing all the nodepools provides a summary where the count of leader nodes and time since the leaders were elected occurred."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ kubectl get nodepools\nNAME         TYPE    READYNODES   NOTREADYNODES   LEADERNODES   LEADERELECTIONAGE   AGE\nhangzhou     Edge                                                                   81m\nyurt-pool1   Cloud   1            0                                                 3d3h\nyurt-pool2   Edge    2            0               1             4h48m               3d3h\nyurt-pool3   Edge    2            0                                                 3d3h\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Inspecting the YAML, further details of the leaders are shown under ",(0,r.jsx)(n.code,{children:"leaderEndpoints"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'$ kubectl get nodepools yurt-pool2 -o yaml\napiVersion: apps.openyurt.io/v1beta2\nkind: NodePool\nmetadata:\n  creationTimestamp: "2025-02-20T23:31:17Z"\n  generation: 1\n  labels:\n    nodepool.openyurt.io/type: edge\n  name: yurt-pool2\n  resourceVersion: "20605"\n  uid: 01f35f91-6a0f-4145-bb45-a73feb85eda1\nspec:\n  enableLeaderElection: true\n  interConnectivity: true\n  leaderElectionStrategy: random\n  leaderReplicas: 1\n  poolScopeMetadata:\n  - group: ""\n    resource: services\n    version: v1\n  - group: discovery.k8s.io\n    resource: endpointslices\n    version: v1\n  type: Edge\nstatus:\n  leaderEndpoints:\n  - address: 172.18.0.3\n    nodeName: openyurt-e2e-test-worker2\n  leaderLastElectedTime: "2025-02-23T22:31:06Z"\n  leaderNum: 1\n  nodes:\n  - openyurt-e2e-test-worker\n  - openyurt-e2e-test-worker2\n  readyNodeNum: 2\n  unreadyNodeNum: 0\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var t=o(96540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);